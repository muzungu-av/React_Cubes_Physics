/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 table_final.gltf
*/
import { useBox, useCompoundBody, usePlane } from "@react-three/cannon";
import { useGLTF } from "@react-three/drei";
import { MutableRefObject } from "react";
import { Group, Mesh } from "three";

export function Model() {
  const { nodes, materials } = useGLTF("/table_final.gltf");
  const Y = 0.2; // толщина твердой поверхности (стол)
  const hY = 0.456; // высота твердой поверхности (стол)

  const Z = -0.0275; // толщина твердой поверхности (задняя стенка)
  const hZ = 1.2; // высота твердой поверхности (задняя стенка)

  const children = [
    {
      geometry: (nodes.Table_1 as Mesh).geometry,
      position: [0.000457, 0.001132, 0.089128],
      rotation: [0, -1.570535, 0],
    },
    {
      geometry: (nodes.Sides_and_back as Mesh).geometry,
      position: [0.000457, -0.001704, 0.089128],
      rotation: [0, -1.570535, 0],
    },
    {
      geometry: (nodes.Table_legs as Mesh).geometry,
      position: [0.000457, 0.001132, 0.089128],
      rotation: [0, -1.570535, 0],
    },
    {
      geometry: (nodes.Board_1 as Mesh).geometry,
      position: [0.000457, 0.001132, 0.089128],
      rotation: [1, 0.554933, 1],
    },
    {
      geometry: (nodes.Board_2 as Mesh).geometry,
      position: [0.000457, 0.313577, 0.089128],
      rotation: [0, -1.570535, 0],
    },
    {
      geometry: (nodes.Wall as Mesh).geometry,
      position: [0.000457, 0.250988, 1.000095],
      rotation: [0, -1.570535, 0],
    },
    {
      geometry: (nodes.Flor as Mesh).geometry,
      position: [0.000457, 0.250988, 1.000095],
      rotation: [0, -1.570535, 0],
    },
  ];

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [compoundRef, _] = useCompoundBody(() => ({
    //_ compoundApi
    mass: 0,
    shapes: [],
    bodies: children.map((child) => ({
      type: "Box", // Здесь можно указать тип вашей геометрии
      args: [1, 1, 1], // Размеры вашей геометрии
      position: child.position,
      rotation: child.rotation,
    })),
  }));

  const [tableRef_1] = useBox(() => ({
    args: [2, Y, 1.2], // Размеры стены по X, Y, Z
    position: [0, hY, 0.5], // Положение стены
    mass: 0, // Стена не должна перемещаться
  }));

  const [tableRef_2] = useBox(() => ({
    args: [2, Y, 1.5], // Размеры стены по X, Y, Z
    position: [0, hZ, Z], // Положение стены
    rotation: [Math.PI / 2, 0, 0],
    mass: 0, // Стена не должна перемещаться
  }));

  //ограничитель справа
  const [tableRef_right] = useBox(() => ({
    args: [1, 0.04, 0.5], // Размеры стены по X, Y, Z
    position: [1, 0.8, 0.55], // Положение стены
    rotation: [Math.PI / 2, 0, Math.PI / 2],
    mass: 0, // Стена не должна перемещаться
  }));

  //ограничитель слева
  const [tableRef_left] = useBox(() => ({
    args: [1, 0.04, 0.5], // Размеры стены по X, Y, Z
    position: [-1, 0.8, 0.55], // Положение стены
    rotation: [Math.PI / 2, 0, Math.PI / 2],
    mass: 0, // Стена не должна перемещаться
  }));

  //ограничитель спереди
  const [tableRef_front] = useBox(() => ({
    args: [0.55, 0.04, 1.9], // Размеры стены по X, Y, Z
    position: [0, 0.8, 1.1], // Положение стены
    rotation: [Math.PI / 2, Math.PI / 2, 0],
    mass: 0, // Стена не должна перемещаться
  }));

  //верхняя полка
  const [tableRef_polka_verh] = useBox(() => ({
    args: [1.8, 0.03, 0.25], // Размеры стены по X, Y, Z  [x, толщина, z]
    position: [0, 1.08, 0.14], // Положение стены  [x, высота, z]
    mass: 0, // Стена не должна перемещаться
  }));

  //нижняя полка
  const [tableRef_polka_niz] = useBox(() => ({
    args: [1.8, 0.03, 0.25], // Размеры стены по X, Y, Z
    position: [0, 0.89, 0.14], // Положение стены
    mass: 0, // Стена не должна перемещаться
  }));

  // плоскость, на которой объекты будут падать
  const [floorRef] = usePlane(() => ({
    mass: 0,
    args: [10, 10], // Размеры плоскости
    rotation: [-Math.PI / 2, 0, 0],
    position: [0, 0, 0],
  }));

  return (
    <group ref={compoundRef as MutableRefObject<Group>}>
      {/* Невидимый ограничитель */}
      <mesh ref={tableRef_1 as MutableRefObject<Mesh>}>
        <meshStandardMaterial />
      </mesh>
      <mesh ref={tableRef_2 as MutableRefObject<Mesh>}>
        <meshStandardMaterial />
      </mesh>

      <mesh ref={tableRef_right as MutableRefObject<Mesh>}>
        <meshStandardMaterial />
      </mesh>

      <mesh ref={tableRef_left as MutableRefObject<Mesh>}>
        <meshStandardMaterial />
      </mesh>

      <mesh ref={tableRef_front as MutableRefObject<Mesh>}>
        <meshStandardMaterial />
      </mesh>

      <mesh ref={tableRef_polka_niz as MutableRefObject<Mesh>}>
        <meshStandardMaterial />
      </mesh>
      <mesh ref={tableRef_polka_verh as MutableRefObject<Mesh>}>
        <meshStandardMaterial />
      </mesh>
      {/* Невидимая стена */}
      <mesh ref={floorRef as MutableRefObject<Mesh>}>
        <meshStandardMaterial />
      </mesh>

      <mesh
        geometry={(nodes.Table_1 as Mesh).geometry}
        material={materials["Tauari wood.001"]}
        position={[0, 0.001, 0.089]}
        rotation={[0, -1.571, 0]}
      />
      <mesh
        geometry={(nodes.Sides_and_back as Mesh).geometry}
        material={materials["Tauari wood.003"]}
        position={[0, -0.002, 0.089]}
        rotation={[0, -1.571, 0]}
      />
      <mesh
        geometry={(nodes.Table_legs as Mesh).geometry}
        material={materials["Tauari wood.002"]}
        position={[0, 0.001, 0.089]}
        rotation={[0, -1.571, 0]}
      />
      <mesh
        geometry={(nodes.Board_1 as Mesh).geometry}
        material={materials["Tauari wood"]}
        position={[0, 0.123, 0.089]}
        rotation={[0, -1.571, 0]}
        scale={[1, 0.555, 1]}
      />
      <mesh
        geometry={(nodes.Wall as Mesh).geometry}
        material={materials["Decorative Wallpaper"]}
        position={[0, 0.25, 1]}
      />
      <mesh
        geometry={(nodes.Flor as Mesh).geometry}
        material={materials["Parquet 2"]}
        position={[0, 0.251, 1]}
        rotation={[0, -1.571, 0]}
        scale={[1, 0.555, 1]}
      />
      <mesh
        geometry={(nodes.Wall2 as Mesh).geometry}
        material={materials["Material.001"]}
        position={[-0.008, 2.037, 0.001]}
      />
      <mesh
        geometry={(nodes.Board_2 as Mesh).geometry}
        material={materials["Tauari wood.004"]}
        position={[0, 0.314, 0.089]}
        rotation={[0, -1.571, 0]}
        scale={[1, 0.555, 1]}
      />
    </group>
  );
}

useGLTF.preload("/table_final.gltf");
